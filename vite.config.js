import fs from 'node:fs';
import path from 'node:path';

import { defineConfig } from 'vite';
import { svelte } from '@sveltejs/vite-plugin-svelte';
import builtins from 'builtin-modules';

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY VITE
if you want to view the source, please visit the github repository of this plugin
https://github.com/kalinichenko88/obsidian-budget-planner-plugin
*/
`;

// Check if production build
const isProd = process.env.NODE_ENV === 'production';

// Copy static files function
const copyFiles = () => {
  const files = ['manifest.json'];
  const outDir = 'dist';

  if (!fs.existsSync(outDir)) {
    fs.mkdirSync(outDir, { recursive: true });
  }

  files.forEach((file) => {
    fs.copyFileSync(path.resolve(file), path.resolve(outDir, file));
  });
};

// Copy files after build
if (isProd) {
  copyFiles();
}

const alias = {
  '@': path.resolve(__dirname, 'src'),
};

export default defineConfig({
  resolve: process.env.VITEST
    ? {
        conditions: ['browser'],
        alias,
      }
    : {
        alias,
      },
  define: {
    'process.env.IS_PRODUCTION': isProd,
  },
  plugins: [
    svelte({
      compilerOptions: { css: 'injected' },
    }),
    {
      name: 'copy-files',
      writeBundle() {
        copyFiles();
      },
    },
    {
      name: 'add-banner',
      generateBundle(_, bundle) {
        for (const fileName in bundle) {
          if (fileName === 'main.js') {
            const asset = bundle[fileName];
            if (asset.type === 'chunk') {
              asset.code = banner + asset.code;
            }
          }
        }
      },
    },
  ],
  build: {
    lib: {
      entry: path.resolve(__dirname, 'src/main.ts'),
      formats: ['cjs'],
      fileName: () => 'main.js',
    },
    rollupOptions: {
      external: [
        'obsidian',
        'electron',
        '@codemirror/autocomplete',
        '@codemirror/collab',
        '@codemirror/commands',
        '@codemirror/language',
        '@codemirror/lint',
        '@codemirror/search',
        '@codemirror/state',
        '@codemirror/view',
        '@lezer/common',
        '@lezer/highlight',
        '@lezer/lr',
        ...builtins,
      ],
      output: {
        entryFileNames: 'main.js',
        dir: 'dist',
        format: 'cjs',
      },
    },
    sourcemap: isProd ? false : 'inline',
    minify: isProd,
    emptyOutDir: false, // Don't clean the output directory before building
    outDir: 'dist',
  },
  server: {
    watch: {
      ignored: ['!**/node_modules/**'],
    },
  },
});
